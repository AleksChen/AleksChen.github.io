{"content":"{\"__ud_title\":\"SSE 服务端推送\",\"__ud_tags\":[\"Network\"],\"__ud_update_time\":1743665653181,\"__ud_create_time\":1743665749000,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1,\"id\":\"SSE-服务端推送\"},\"content\":[{\"type\":\"text\",\"text\":\"SSE 服务端推送\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"引言\"},\"content\":[{\"type\":\"text\",\"text\":\"引言\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Server-Sent Events (SSE) 是一种服务器推送技术，允许服务器向客户端实时推送数据。在以下场景特别有用：\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"实时数据更新（如股票价格、天气信息）\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"社交媒体信息流\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"实时日志显示\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"进度通知\"}]}]}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m911icos-Pasted-image-20250402200626.png\",\"alt\":\"Pasted image 20250402200626.png\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"SSE-的本质\"},\"content\":[{\"type\":\"text\",\"text\":\"SSE 的本质\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"SSE 本质上是基于 HTTP 协议的单向通信机制：\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"使用 HTTP 长连接实现服务器到客户端的单向数据流\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"数据格式为纯文本，编码必须是 UTF-8\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"基于标准 HTTP 协议，无需特殊协议支持\"}]}]}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"SSE-的特点\"},\"content\":[{\"type\":\"text\",\"text\":\"SSE 的特点\"}]},{\"type\":\"orderedList\",\"attrs\":{\"start\":1,\"type\":null},\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"单向通信：服务器到客户端的单向数据流\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"自动重连：断开后默认自动重连\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"简单易用：使用标准 HTTP，无需 WebSocket 的复杂配置\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"支持自定义事件\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"天然支持跨域（CORS）\"}]}]}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"SSE-客户端-API\"},\"content\":[{\"type\":\"text\",\"text\":\"SSE 客户端 API\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"基本使用示例：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"const evtSource = new EventSource('/events');\\n\\n// 监听消息\\nevtSource.onmessage = function(event) {\\n    const data = JSON.parse(event.data);\\n    console.log(data);\\n};\\n\\n// 监听连接打开\\nevtSource.onopen = function() {\\n    console.log('连接已建立');\\n};\\n\\n// 监听错误\\nevtSource.onerror = function(err) {\\n    console.error('发生错误:', err);\\n};\\n\\n// 监听自定义事件\\nevtSource.addEventListener('custom-event', function(e) {\\n    console.log('自定义事件:', e.data);\\n});\\n\\n// 关闭连接\\n// evtSource.close();\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"SSE-服务端实现\"},\"content\":[{\"type\":\"text\",\"text\":\"SSE 服务端实现\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"数据格式\"},\"content\":[{\"type\":\"text\",\"text\":\"数据格式\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"服务器发送的数据必须遵循特定格式：\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"每条消息以 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"data:\"},{\"type\":\"text\",\"text\":\" 开头\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"每条消息以 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"\\\\n\\\\n\"},{\"type\":\"text\",\"text\":\" 结尾\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"支持多个字段：data、event、id、retry\"}]}]}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"data-字段\"},\"content\":[{\"type\":\"text\",\"text\":\"data 字段\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"text\"},\"content\":[{\"type\":\"text\",\"text\":\"data: 消息内容\\\\n\\\\n\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"多行数据：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"text\"},\"content\":[{\"type\":\"text\",\"text\":\"data: 第一行\\\\n\\ndata: 第二行\\\\n\\\\n\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"id-字段\"},\"content\":[{\"type\":\"text\",\"text\":\"id 字段\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于消息标识，断线重连时会发送 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Last-Event-ID\"},{\"type\":\"text\",\"text\":\" 头：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"text\"},\"content\":[{\"type\":\"text\",\"text\":\"id: 1\\\\n\\ndata: 消息内容\\\\n\\\\n\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"event-字段\"},\"content\":[{\"type\":\"text\",\"text\":\"event 字段\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于指定事件类型：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"text\"},\"content\":[{\"type\":\"text\",\"text\":\"event: custom-event\\\\n\\ndata: 消息内容\\\\n\\\\n\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"retry-字段\"},\"content\":[{\"type\":\"text\",\"text\":\"retry 字段\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"指定重连时间（毫秒）：\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"text\"},\"content\":[{\"type\":\"text\",\"text\":\"retry: 10000\\\\n\\ndata: 消息内容\\\\n\\\\n\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"Node-服务器实例\"},\"content\":[{\"type\":\"text\",\"text\":\"Node 服务器实例\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"const express = require('express');\\nconst app = express();\\n\\napp.get('/events', (req, res) => {\\n    // 设置 SSE 所需的 headers\\n    res.writeHead(200, {\\n        'Content-Type': 'text/event-stream',\\n        'Cache-Control': 'no-cache',\\n        'Connection': 'keep-alive'\\n    });\\n\\n    // 发送初始数据\\n    res.write('data: 连接已建立\\\\n\\\\n');\\n\\n    // 定时发送数据\\n    const intervalId = setInterval(() => {\\n        const data = {\\n            time: new Date().toISOString(),\\n            value: Math.random()\\n        };\\n        \\n        res.write(`data: ${JSON.stringify(data)}\\\\n\\\\n`);\\n    }, 1000);\\n\\n    // 监听连接关闭\\n    req.on('close', () => {\\n        clearInterval(intervalId);\\n    });\\n});\\n\\napp.listen(3000, () => {\\n    console.log('SSE 服务器运行在 3000 端口');\\n});\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"注意事项\"},\"content\":[{\"type\":\"text\",\"text\":\"注意事项\"}]},{\"type\":\"orderedList\",\"attrs\":{\"start\":1,\"type\":null},\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"格式有特定要求：开头为 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"data:\"},{\"type\":\"text\",\"text\":\"、结尾为 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"\\\\n\\\\n\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"每个浏览器的并发 SSE 连接数有限制\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"某些代理服务器可能不支持长连接\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"建议实现错误重试机制\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"大规模使用时注意服务器资源管理\"}]}]}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"总结\"},\"content\":[{\"type\":\"text\",\"text\":\"总结\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"SSE 是一个简单但强大的服务器推送方案：\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"相比 WebSocket 更轻量，实现更简单\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"单向通信满足大多数推送场景\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"基于 HTTP 协议，兼容性好\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"自动重连机制提高可靠性\"}]}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"适用场景：\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"实时数据更新\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"消息通知\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"日志流式处理\"}]}]}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"参考资料\"},\"content\":[{\"type\":\"text\",\"text\":\"参考资料\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"Server-Sent Events 教程 - 阮一峰的网络日志\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://juejin.cn/post/7487831341591511067\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"高并发场景下，为什么大厂都选择SSE而不是WebSocket？\"}]}]}]}]}","title":"SSE 服务端推送","tags":["Network"],"updateTime":1743665653181,"createTime":1743665749000,"draft":false,"intro":"Server-Sent Events (SSE) 是一种服务器推送技术，允许服务器向客户端实时推送数据。在以下场景特别有用：","html":"<h1 level=\"1\" id=\"SSE-服务端推送\">SSE 服务端推送</h1><h2 level=\"2\" id=\"引言\">引言</h2><p>Server-Sent Events (SSE) 是一种服务器推送技术，允许服务器向客户端实时推送数据。在以下场景特别有用：</p><ul><li><p>实时数据更新（如股票价格、天气信息）</p></li><li><p>社交媒体信息流</p></li><li><p>实时日志显示</p></li><li><p>进度通知</p></li></ul><img src=\"/post-assets/m911icos-Pasted-image-20250402200626.png\" alt=\"Pasted image 20250402200626.png\"><p></p><h2 level=\"2\" id=\"SSE-的本质\">SSE 的本质</h2><p>SSE 本质上是基于 HTTP 协议的单向通信机制：</p><ul><li><p>使用 HTTP 长连接实现服务器到客户端的单向数据流</p></li><li><p>数据格式为纯文本，编码必须是 UTF-8</p></li><li><p>基于标准 HTTP 协议，无需特殊协议支持</p></li></ul><h2 level=\"2\" id=\"SSE-的特点\">SSE 的特点</h2><ol><li><p>单向通信：服务器到客户端的单向数据流</p></li><li><p>自动重连：断开后默认自动重连</p></li><li><p>简单易用：使用标准 HTTP，无需 WebSocket 的复杂配置</p></li><li><p>支持自定义事件</p></li><li><p>天然支持跨域（CORS）</p></li></ol><h2 level=\"2\" id=\"SSE-客户端-API\">SSE 客户端 API</h2><p>基本使用示例：</p><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> evtSource = <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">EventSource</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;/events&apos;</span>);\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 监听消息</span>\nevtSource.<span class=\"hljs-property\" class=\"hljs-property\">onmessage</span> = <span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\" class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">JSON</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">parse</span>(event.<span class=\"hljs-property\" class=\"hljs-property\">data</span>);\n    <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(data);\n};\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 监听连接打开</span>\nevtSource.<span class=\"hljs-property\" class=\"hljs-property\">onopen</span> = <span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\" class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;连接已建立&apos;</span>);\n};\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 监听错误</span>\nevtSource.<span class=\"hljs-property\" class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\" class=\"hljs-params\">err</span>) {\n    <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">error</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;发生错误:&apos;</span>, err);\n};\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 监听自定义事件</span>\nevtSource.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">addEventListener</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;custom-event&apos;</span>, <span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\" class=\"hljs-params\">e</span>) {\n    <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;自定义事件:&apos;</span>, e.<span class=\"hljs-property\" class=\"hljs-property\">data</span>);\n});\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 关闭连接</span>\n<span class=\"hljs-comment\" class=\"hljs-comment\">// evtSource.close();</span></code></pre></div></div><h2 level=\"2\" id=\"SSE-服务端实现\">SSE 服务端实现</h2><h3 level=\"3\" id=\"数据格式\">数据格式</h3><p>服务器发送的数据必须遵循特定格式：</p><ul><li><p>每条消息以 <code>data:</code> 开头</p></li><li><p>每条消息以 <code>\\n\\n</code> 结尾</p></li><li><p>支持多个字段：data、event、id、retry</p></li></ul><h3 level=\"3\" id=\"data-字段\">data 字段</h3><div class=\"llt-code readonly\"><div class=\"language\">text</div><div class=\"wrapper\"><pre><code class=\"language-text\">data: 消息内容\\n\\n</code></pre></div></div><p>多行数据：</p><div class=\"llt-code readonly\"><div class=\"language\">text</div><div class=\"wrapper\"><pre><code class=\"language-text\">data: 第一行\\n\ndata: 第二行\\n\\n</code></pre></div></div><h3 level=\"3\" id=\"id-字段\">id 字段</h3><p>用于消息标识，断线重连时会发送 <code>Last-Event-ID</code> 头：</p><div class=\"llt-code readonly\"><div class=\"language\">text</div><div class=\"wrapper\"><pre><code class=\"language-text\">id: 1\\n\ndata: 消息内容\\n\\n</code></pre></div></div><h3 level=\"3\" id=\"event-字段\">event 字段</h3><p>用于指定事件类型：</p><div class=\"llt-code readonly\"><div class=\"language\">text</div><div class=\"wrapper\"><pre><code class=\"language-text\">event: custom-event\\n\ndata: 消息内容\\n\\n</code></pre></div></div><h3 level=\"3\" id=\"retry-字段\">retry 字段</h3><p>指定重连时间（毫秒）：</p><div class=\"llt-code readonly\"><div class=\"language\">text</div><div class=\"wrapper\"><pre><code class=\"language-text\">retry: 10000\\n\ndata: 消息内容\\n\\n</code></pre></div></div><h2 level=\"2\" id=\"Node-服务器实例\">Node 服务器实例</h2><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\" class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;express&apos;</span>);\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title,function_\" class=\"hljs-title,function_\">express</span>();\n\napp.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">get</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;/events&apos;</span>, <span class=\"hljs-function\" class=\"hljs-function\">(<span class=\"hljs-params\" class=\"hljs-params\">req, res</span>) =&gt;</span> {\n    <span class=\"hljs-comment\" class=\"hljs-comment\">// 设置 SSE 所需的 headers</span>\n    res.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">writeHead</span>(<span class=\"hljs-number\" class=\"hljs-number\">200</span>, {\n        <span class=\"hljs-string\" class=\"hljs-string\">&apos;Content-Type&apos;</span>: <span class=\"hljs-string\" class=\"hljs-string\">&apos;text/event-stream&apos;</span>,\n        <span class=\"hljs-string\" class=\"hljs-string\">&apos;Cache-Control&apos;</span>: <span class=\"hljs-string\" class=\"hljs-string\">&apos;no-cache&apos;</span>,\n        <span class=\"hljs-string\" class=\"hljs-string\">&apos;Connection&apos;</span>: <span class=\"hljs-string\" class=\"hljs-string\">&apos;keep-alive&apos;</span>\n    });\n\n    <span class=\"hljs-comment\" class=\"hljs-comment\">// 发送初始数据</span>\n    res.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">write</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;data: 连接已建立\\n\\n&apos;</span>);\n\n    <span class=\"hljs-comment\" class=\"hljs-comment\">// 定时发送数据</span>\n    <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> intervalId = <span class=\"hljs-built_in\" class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\" class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> data = {\n            <span class=\"hljs-attr\" class=\"hljs-attr\">time</span>: <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Date</span>().<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">toISOString</span>(),\n            <span class=\"hljs-attr\" class=\"hljs-attr\">value</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Math</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">random</span>()\n        };\n        \n        res.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">write</span>(<span class=\"hljs-string\" class=\"hljs-string\">`data: <span class=\"hljs-subst\" class=\"hljs-subst\">${<span class=\"hljs-built_in\" class=\"hljs-built_in\">JSON</span>.stringify(data)}</span>\\n\\n`</span>);\n    }, <span class=\"hljs-number\" class=\"hljs-number\">1000</span>);\n\n    <span class=\"hljs-comment\" class=\"hljs-comment\">// 监听连接关闭</span>\n    req.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">on</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;close&apos;</span>, <span class=\"hljs-function\" class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\" class=\"hljs-built_in\">clearInterval</span>(intervalId);\n    });\n});\n\napp.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">listen</span>(<span class=\"hljs-number\" class=\"hljs-number\">3000</span>, <span class=\"hljs-function\" class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;SSE 服务器运行在 3000 端口&apos;</span>);\n});</code></pre></div></div><h2 level=\"2\" id=\"注意事项\">注意事项</h2><ol><li><p>格式有特定要求：开头为 <code>data:</code>、结尾为 <code>\\n\\n</code></p></li><li><p>每个浏览器的并发 SSE 连接数有限制</p></li><li><p>某些代理服务器可能不支持长连接</p></li><li><p>建议实现错误重试机制</p></li><li><p>大规模使用时注意服务器资源管理</p></li></ol><h2 level=\"2\" id=\"总结\">总结</h2><p>SSE 是一个简单但强大的服务器推送方案：</p><ul><li><p>相比 WebSocket 更轻量，实现更简单</p></li><li><p>单向通信满足大多数推送场景</p></li><li><p>基于 HTTP 协议，兼容性好</p></li><li><p>自动重连机制提高可靠性</p></li></ul><p>适用场景：</p><ul><li><p>实时数据更新</p></li><li><p>消息通知</p></li><li><p>日志流式处理</p></li></ul><h2 level=\"2\" id=\"参考资料\">参考资料</h2><ul><li><p><a target=\"_blank\" rel=\"noreferer\" href=\"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html\">Server-Sent Events 教程 - 阮一峰的网络日志</a></p></li><li><p><a target=\"_blank\" rel=\"noreferer\" href=\"https://juejin.cn/post/7487831341591511067\">高并发场景下，为什么大厂都选择SSE而不是WebSocket？</a></p></li></ul><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","cover":{"src":"/post-assets/m911icos-Pasted-image-20250402200626.png","alt":"Pasted image 20250402200626.png","title":null},"id":"2504-sse","path":"/posts/2504-sse.json"}