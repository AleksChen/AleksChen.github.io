{"content":"{\"__ud_title\":\"手写 instanceof\",\"__ud_tags\":[\"JavaScript\"],\"__ud_update_time\":1733132781280,\"__ud_create_time\":1503459142000,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1,\"id\":\"手写-instanceof\"},\"content\":[{\"type\":\"text\",\"text\":\"手写 instanceof\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在前端面试中，\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 是一个常见的问题。面试官通常会要求面试者手写 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 的实现，以测试他们对 JavaScript 类型系统和原型链的理解。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"类型判断\"},\"content\":[{\"type\":\"text\",\"text\":\"类型判断\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在 JavaScript 中数据分为基本类型和引用类型。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"基本类型\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Number\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"String\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Boolean\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"undefined\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"null\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Symbol\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"BigInt\"}]}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"引用类型\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Object\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Array\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Function\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Date\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"RegExp\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Map\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Set\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Promise\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"...\"}]}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在实际工作中，我们常常需要判断一个变量的类型。对于基本类型(\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"null\"},{\"type\":\"text\",\"text\":\" 除外) 和 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Function\"},{\"type\":\"text\",\"text\":\" 我们可以使用 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"typeof\"},{\"type\":\"text\",\"text\":\" 进行判断。对于引用类型我们则需要使用 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 进行判断。\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"// 基本数据类型\\nlet numberExample = 123;\\nlet stringExample = \\\"hello\\\";\\nlet booleanExample = true;\\nlet nullExample = null;\\nlet undefinedExample = undefined;\\nlet symbolExample = Symbol(\\\"example\\\");\\nlet bigIntExample = BigInt(10);\\n\\n// 引用类型\\nlet objectExample = {};\\nlet arrayExample = [];\\nlet functionExample = function () {};\\nlet dateExample = new Date();\\nlet regExpExample = /abc/;\\nlet mapExample = new Map();\\nlet setExample = new Set();\\nlet promiseExample = new Promise(() => {});\\n\\n// typeof 适用范围\\nconsole.log(typeof numberExample); // number\\nconsole.log(typeof stringExample); // string\\nconsole.log(typeof booleanExample); // boolean\\nconsole.log(typeof undefinedExample); // undefined\\nconsole.log(typeof symbolExample); // symbol\\nconsole.log(typeof bigIntExample); // bigint\\nconsole.log(typeof functionExample); // function\\n\\n// typeof 对 null 和于其他引用类型无法判断\\nconsole.log(typeof nullExample); // object。这是一个历史遗留问题，实际上 null 是基本数据类型\\nconsole.log(typeof objectExample); // object\\nconsole.log(typeof arrayExample); // object\\nconsole.log(typeof dateExample); // object\\nconsole.log(typeof regExpExample); // object\\nconsole.log(typeof mapExample); // object\\nconsole.log(typeof setExample); // object\\nconsole.log(typeof promiseExample); // object\\n\\n// instanceof 判断对象具体是哪种类型的对象\\nconsole.log(objectExample instanceof Object); // true\\nconsole.log(arrayExample instanceof Array); // true\\nconsole.log(functionExample instanceof Function); // true\\nconsole.log(dateExample instanceof Date); // true\\nconsole.log(regExpExample instanceof RegExp); // true\\nconsole.log(mapExample instanceof Map); // true\\nconsole.log(setExample instanceof Set); // true\\nconsole.log(promiseExample instanceof Promise); // true\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"instanceof-是什么\"},\"content\":[{\"type\":\"text\",\"text\":\"instanceof 是什么\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"MDN 定义：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 是 JavaScript 的一个二元操作符，用于测试构造函数的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"prototype\"},{\"type\":\"text\",\"text\":\" 属性是否出现在对象的原型链中的任何位置。换句话说，\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 可以用于判断一个对象是否由某个构造函数创建的。\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"function Car(make, model, year) {\\n  this.make = make;\\n  this.model = model;\\n  this.year = year;\\n}\\n\\nconst auto = new Car(\\\"Honda\\\", \\\"Accord\\\", 1998);\\nconsole.log(auto instanceof Car); // true\"}]},{\"type\":\"paragraph\"},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在这个例子中，auto 是 Car 的一个实例，所以 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"auto instanceof Car\"},{\"type\":\"text\",\"text\":\" 返回 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"true\"},{\"type\":\"text\",\"text\":\"。\"}]},{\"type\":\"blockquote\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"注意：左侧可以是任意类型，而右侧必须是一个函数的实例。参数错误时会报错。\"}]}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m46rsblg-参数要求.png\",\"alt\":\"参数要求.png\",\"title\":null}},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"instanceof-原理\"},\"content\":[{\"type\":\"text\",\"text\":\"instanceof 原理\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"每个对象都有一个 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"__proto__\"},{\"type\":\"text\",\"text\":\" 属性。在对象创建的时候会将 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"__proto__\"},{\"type\":\"text\",\"text\":\" 属性指向它的构造函数的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"prototype\"},{\"type\":\"text\",\"text\":\" 属性上。并且构造函数的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"prototype\"},{\"type\":\"text\",\"text\":\" 属性本身也是一个对象。它也有自己的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"__proto__\"},{\"type\":\"text\",\"text\":\" 属性。通过 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"__proto__\"},{\"type\":\"text\",\"text\":\" -> \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"prototype\"},{\"type\":\"text\",\"text\":\" 这样串联形成一个链条，这个链条就是原型链。原型链的终点是 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Object\"},{\"type\":\"text\",\"text\":\"，`Object.prototype.__proto__` 的值为 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"null\"},{\"type\":\"text\",\"text\":\"。\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"每个对象的构造函数都可以在原型链上找到，因此 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 通过原型链可以判断对象是否由某个构造函数创建。\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m46rsblj-原型链.png\",\"alt\":\"原型链.png\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"实现一个-instanceof\"},\"content\":[{\"type\":\"text\",\"text\":\"实现一个 instanceof\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"手写-instanceof\"},\"content\":[{\"type\":\"text\",\"text\":\"手写 instanceof\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"手写 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 的实现可以帮助我们更深入地理解 JavaScript 的原型链。下面是一个简易的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 实现：\"}]},{\"type\":\"orderedList\",\"attrs\":{\"start\":1},\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"参数校验\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"比较 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"obj.__proto === constructor.prototype\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"找到就立即返回 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"true\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"遍历到原型链终点 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"constructor.prototype === null\"},{\"type\":\"text\",\"text\":\" 时，返回 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"false\"}]}]}]}]}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"function myInstanceof(obj, constructor) {\\n  const BASIC_TYPE = [\\n    \\\"[object Undefined]\\\",\\n    \\\"[object Null]\\\",\\n    \\\"[object Number]\\\",\\n    \\\"[object String]\\\",\\n    \\\"[object Boolean]\\\",\\n    \\\"[object Symbol]\\\",\\n    \\\"[object BigInt]\\\",\\n  ];\\n\\n  const objType = Object.prototype.toString.call(obj);\\n  const constructorType = Object.prototype.toString.call(constructor);\\n\\n  if (BASIC_TYPE.includes(constructorType)) {\\n    throw TypeError(\\\"Right-hand side of 'instanceof' is not an object\\\");\\n  }\\n  if (typeof constructor !== \\\"function\\\") {\\n    throw TypeError(\\\"Right-hand side of 'instanceof' is not callable\\\");\\n  }\\n  if (BASIC_TYPE.includes(objType)) {\\n    return false;\\n  }\\n\\n  let objProto = Reflect.getPrototypeOf(obj);\\n  while (objProto !== null) {\\n    if (Object.is(objProto, constructor.prototype)) {\\n      return true;\\n    }\\n    objProto = Reflect.getPrototypeOf(obj);\\n  }\\n  return false;\\n}\"}]},{\"type\":\"blockquote\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"当传入的参数是对象时，如果操作成功  \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"Reflect.getPrototypeOf(target)\"},{\"type\":\"text\",\"text\":\"  返回对象的原型，如果操作失败（比如，目标不是对象）则返回  \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"false\"},{\"type\":\"text\",\"text\":\"。\"}]}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"测试结果\"},\"content\":[{\"type\":\"text\",\"text\":\"测试结果\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m46rsbli-测试结果.png\",\"alt\":\"测试结果.png\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"总结\"},\"content\":[{\"type\":\"text\",\"text\":\"总结\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"本文介绍了 JavaScript 类型判断的方法。对 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"instanceof\"},{\"type\":\"text\",\"text\":\" 的概念、用法和实现进行了介绍。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"资料\"},\"content\":[{\"type\":\"text\",\"text\":\"资料\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"instanceof - JavaScript | MDN\"}]}]}]}]}","title":"手写 instanceof","tags":["JavaScript"],"updateTime":1733132781280,"createTime":1503459142000,"draft":false,"intro":"在前端面试中，instanceof 是一个常见的问题。面试官通常会要求面试者手写 instanceof 的实现，以测试他们对 JavaScript 类型系统和原型链的理解。","html":"<h1 level=\"1\" id=\"手写-instanceof\">手写 instanceof</h1><p>在前端面试中，<code>instanceof</code> 是一个常见的问题。面试官通常会要求面试者手写 <code>instanceof</code> 的实现，以测试他们对 JavaScript 类型系统和原型链的理解。</p><h2 level=\"2\" id=\"类型判断\">类型判断</h2><p>在 JavaScript 中数据分为基本类型和引用类型。</p><p>基本类型</p><ul><li><p><code>Number</code></p></li><li><p><code>String</code></p></li><li><p><code>Boolean</code></p></li><li><p><code>undefined</code></p></li><li><p><code>null</code></p></li><li><p><code>Symbol</code></p></li><li><p><code>BigInt</code></p></li></ul><p>引用类型</p><ul><li><p><code>Object</code></p></li><li><p><code>Array</code></p></li><li><p><code>Function</code></p></li><li><p><code>Date</code></p></li><li><p><code>RegExp</code></p></li><li><p><code>Map</code></p></li><li><p><code>Set</code></p></li><li><p><code>Promise</code></p></li><li><p>...</p></li></ul><p>在实际工作中，我们常常需要判断一个变量的类型。对于基本类型(<code>null</code> 除外) 和 <code>Function</code> 我们可以使用 <code>typeof</code> 进行判断。对于引用类型我们则需要使用 <code>instanceof</code> 进行判断。</p><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\" class=\"hljs-comment\">// 基本数据类型</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> numberExample = <span class=\"hljs-number\" class=\"hljs-number\">123</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> stringExample = <span class=\"hljs-string\" class=\"hljs-string\">&quot;hello&quot;</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> booleanExample = <span class=\"hljs-literal\" class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> nullExample = <span class=\"hljs-literal\" class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> undefinedExample = <span class=\"hljs-literal\" class=\"hljs-literal\">undefined</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> symbolExample = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Symbol</span>(<span class=\"hljs-string\" class=\"hljs-string\">&quot;example&quot;</span>);\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> bigIntExample = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">BigInt</span>(<span class=\"hljs-number\" class=\"hljs-number\">10</span>);\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 引用类型</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> objectExample = {};\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> arrayExample = [];\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> functionExample = <span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\" class=\"hljs-params\"></span>) {};\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> dateExample = <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Date</span>();\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> regExpExample = <span class=\"hljs-regexp\" class=\"hljs-regexp\">/abc/</span>;\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> mapExample = <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Map</span>();\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> setExample = <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Set</span>();\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> promiseExample = <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Promise</span>(<span class=\"hljs-function\" class=\"hljs-function\">() =&gt;</span> {});\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// typeof 适用范围</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> numberExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// number</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> stringExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// string</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> booleanExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// boolean</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> undefinedExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> symbolExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// symbol</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> bigIntExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// bigint</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> functionExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// function</span>\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// typeof 对 null 和于其他引用类型无法判断</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> nullExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object。这是一个历史遗留问题，实际上 null 是基本数据类型</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> objectExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> arrayExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> dateExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> regExpExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> mapExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> setExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> promiseExample); <span class=\"hljs-comment\" class=\"hljs-comment\">// object</span>\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// instanceof 判断对象具体是哪种类型的对象</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(objectExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Object</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(arrayExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Array</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(functionExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Function</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(dateExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Date</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(regExpExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">RegExp</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(mapExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Map</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(setExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Set</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(promiseExample <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Promise</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span></code></pre></div></div><p></p><h2 level=\"2\" id=\"instanceof-是什么\">instanceof 是什么</h2><p>MDN 定义：<code>instanceof</code> 是 JavaScript 的一个二元操作符，用于测试构造函数的 <code>prototype</code> 属性是否出现在对象的原型链中的任何位置。换句话说，<code>instanceof</code> 可以用于判断一个对象是否由某个构造函数创建的。</p><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span> <span class=\"hljs-title,function_\" class=\"hljs-title,function_\">Car</span>(<span class=\"hljs-params\" class=\"hljs-params\">make, model, year</span>) {\n  <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">this</span>.<span class=\"hljs-property\" class=\"hljs-property\">make</span> = make;\n  <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">this</span>.<span class=\"hljs-property\" class=\"hljs-property\">model</span> = model;\n  <span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">this</span>.<span class=\"hljs-property\" class=\"hljs-property\">year</span> = year;\n}\n\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> auto = <span class=\"hljs-keyword\" class=\"hljs-keyword\">new</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Car</span>(<span class=\"hljs-string\" class=\"hljs-string\">&quot;Honda&quot;</span>, <span class=\"hljs-string\" class=\"hljs-string\">&quot;Accord&quot;</span>, <span class=\"hljs-number\" class=\"hljs-number\">1998</span>);\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">console</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">log</span>(auto <span class=\"hljs-keyword\" class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Car</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// true</span></code></pre></div></div><p></p><p>在这个例子中，auto 是 Car 的一个实例，所以 <code>auto instanceof Car</code> 返回 <code>true</code>。</p><blockquote><p>注意：左侧可以是任意类型，而右侧必须是一个函数的实例。参数错误时会报错。</p></blockquote><img src=\"/post-assets/m46rsblg-参数要求.png\" alt=\"参数要求.png\"><h2 level=\"2\" id=\"instanceof-原理\">instanceof 原理</h2><p>每个对象都有一个 <code>__proto__</code> 属性。在对象创建的时候会将 <code>__proto__</code> 属性指向它的构造函数的 <code>prototype</code> 属性上。并且构造函数的 <code>prototype</code> 属性本身也是一个对象。它也有自己的 <code>__proto__</code> 属性。通过 <code>__proto__</code> -&gt; <code>prototype</code> 这样串联形成一个链条，这个链条就是原型链。原型链的终点是 <code>Object</code>，`Object.prototype.__proto__` 的值为 <code>null</code>。</p><p>每个对象的构造函数都可以在原型链上找到，因此 <code>instanceof</code> 通过原型链可以判断对象是否由某个构造函数创建。</p><img src=\"/post-assets/m46rsblj-原型链.png\" alt=\"原型链.png\"><p></p><h2 level=\"2\" id=\"实现一个-instanceof\">实现一个 instanceof</h2><h3 level=\"3\" id=\"手写-instanceof\">手写 instanceof</h3><p>手写 <code>instanceof</code> 的实现可以帮助我们更深入地理解 JavaScript 的原型链。下面是一个简易的 <code>instanceof</code> 实现：</p><ol><li><p>参数校验</p></li><li><p>比较 <code>obj.__proto === constructor.prototype</code></p><ul><li><p>找到就立即返回 <code>true</code></p></li><li><p>遍历到原型链终点 <code>constructor.prototype === null</code> 时，返回 <code>false</code></p></li></ul></li></ol><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">function</span> <span class=\"hljs-title,function_\" class=\"hljs-title,function_\">myInstanceof</span>(<span class=\"hljs-params\" class=\"hljs-params\">obj, constructor</span>) {\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> <span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">BASIC_TYPE</span> = [\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object Undefined]&quot;</span>,\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object Null]&quot;</span>,\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object Number]&quot;</span>,\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object String]&quot;</span>,\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object Boolean]&quot;</span>,\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object Symbol]&quot;</span>,\n    <span class=\"hljs-string\" class=\"hljs-string\">&quot;[object BigInt]&quot;</span>,\n  ];\n\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> objType = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Object</span>.<span class=\"hljs-property\" class=\"hljs-property\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\" class=\"hljs-property\">toString</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">call</span>(obj);\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> constructorType = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Object</span>.<span class=\"hljs-property\" class=\"hljs-property\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\" class=\"hljs-property\">toString</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">call</span>(constructor);\n\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">BASIC_TYPE</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">includes</span>(constructorType)) {\n    <span class=\"hljs-keyword\" class=\"hljs-keyword\">throw</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">TypeError</span>(<span class=\"hljs-string\" class=\"hljs-string\">&quot;Right-hand side of &apos;instanceof&apos; is not an object&quot;</span>);\n  }\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\" class=\"hljs-keyword\">typeof</span> constructor !== <span class=\"hljs-string\" class=\"hljs-string\">&quot;function&quot;</span>) {\n    <span class=\"hljs-keyword\" class=\"hljs-keyword\">throw</span> <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">TypeError</span>(<span class=\"hljs-string\" class=\"hljs-string\">&quot;Right-hand side of &apos;instanceof&apos; is not callable&quot;</span>);\n  }\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable,constant_\" class=\"hljs-variable,constant_\">BASIC_TYPE</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">includes</span>(objType)) {\n    <span class=\"hljs-keyword\" class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\" class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">let</span> objProto = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Reflect</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">getPrototypeOf</span>(obj);\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">while</span> (objProto !== <span class=\"hljs-literal\" class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (<span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Object</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">is</span>(objProto, constructor.<span class=\"hljs-property\" class=\"hljs-property\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">prototype</span></span>)) {\n      <span class=\"hljs-keyword\" class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\" class=\"hljs-literal\">true</span>;\n    }\n    objProto = <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Reflect</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">getPrototypeOf</span>(obj);\n  }\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\" class=\"hljs-literal\">false</span>;\n}</code></pre></div></div><blockquote><p>当传入的参数是对象时，如果操作成功 &nbsp;<code>Reflect.getPrototypeOf(target)</code>&nbsp; 返回对象的原型，如果操作失败（比如，目标不是对象）则返回 &nbsp;<code>false</code>。</p></blockquote><p></p><h3 level=\"3\" id=\"测试结果\">测试结果</h3><img src=\"/post-assets/m46rsbli-测试结果.png\" alt=\"测试结果.png\"><p></p><h2 level=\"2\" id=\"总结\">总结</h2><p>本文介绍了 JavaScript 类型判断的方法。对 <code>instanceof</code> 的概念、用法和实现进行了介绍。</p><p></p><h2 level=\"2\" id=\"资料\">资料</h2><ul><li><p><a target=\"_blank\" rel=\"noreferer\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof - JavaScript | MDN</a></p></li></ul><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","cover":{"src":"/post-assets/cover/cover-js.png"},"id":"1708-implement-instanceof","path":"/posts/1708-implement-instanceof.json"}