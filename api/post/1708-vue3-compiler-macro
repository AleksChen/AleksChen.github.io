{"content":"{\"__ud_title\":\"Vue3 编译宏使用与原理\",\"__ud_tags\":[\"Vue\"],\"__ud_update_time\":1734084473938,\"__ud_create_time\":1603459142000,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1,\"id\":\"Vue3-编译宏使用与原理\"},\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"Vue3 编译宏使用与原理\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Vue3 编译宏是一种特殊的语法糖，用于简化组件选项的声明。它们可以在 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"<script setup>\"},{\"type\":\"text\",\"text\":\" 中使用，并且会在编译阶段被处理。编译宏可以提供类型推断、运行时消除以及开发体验优化等功能。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"什么是编译宏\"},\"content\":[{\"type\":\"text\",\"text\":\"一、什么是编译宏\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Vue3 编译宏是在代码\"},{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"编译阶段处理的特殊指令或函数\"},{\"type\":\"text\",\"text\":\"。Vue3 的编译宏主要是为 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"<script setup>\"},{\"type\":\"text\",\"text\":\" 语法设计的。编译宏不需要导入就可以直接使用，且会随着 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"<script setup>\"},{\"type\":\"text\",\"text\":\" 的处理过程一同被编译掉。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"编译宏有什么用\"},\"content\":[{\"type\":\"text\",\"text\":\"二、编译宏有什么用\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"编译宏提供了一种更简洁的方式来编写和维护已有的配置。在 Vue3 中，编译宏主要有以下几个作用：\"}]},{\"type\":\"orderedList\",\"attrs\":{\"start\":1},\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"类型推断和检查\"},{\"type\":\"text\",\"text\":\"：宏可以提供类型安全，帮助开发者在编写代码时避免类型错误。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"运行时消除\"},{\"type\":\"text\",\"text\":\"：在 Vue3 的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"<script setup>\"},{\"type\":\"text\",\"text\":\" 中，引入的宏在编译阶段处理后，最终生成的代码中可能不会包含这些宏。这意味着宏可以提供额外的功能，而不会增加运行时的开销。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"代码重用和维护\"},{\"type\":\"text\",\"text\":\"：通过定义宏，可以在不同的组件中重用相同的逻辑。这有助于维护代码的一致性，并减少重复代码的编写。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"简化配置\"},{\"type\":\"text\",\"text\":\"：某些宏可以用于简化 Vue 组件的配置，使得配置更加简洁明了。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"优化开发体验\"},{\"type\":\"text\",\"text\":\"：宏可以减少样板文件，提供更简洁的语法，从而提高开发效率和体验。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"高级功能\"},{\"type\":\"text\",\"text\":\"：一些宏可能提供高级功能，如自动注册组件、自动导入依赖等。\"}]}]}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"常见的编译宏\"},\"content\":[{\"type\":\"text\",\"text\":\"三、常见的编译宏\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Vue 3 引入了几个编译宏（Compile-time Macros）来提高性能和开发体验。这些宏在编译时会被转换为高效的代码。下面是主要的编译宏：\"}]},{\"type\":\"orderedList\",\"attrs\":{\"start\":1},\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineProps\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于声明组件的 props\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"const props = defineProps(['title', 'likes'])\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineEmits\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于声明组件可能触发的事件\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"const emit = defineEmits(['change', 'delete'])\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineExpose\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于显式地指定哪些属性和方法可以被父组件访问\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineExpose({ method1, property1 })\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"withDefaults\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于为 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineProps\"},{\"type\":\"text\",\"text\":\" 定义的 props 提供默认值\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"const props = withDefaults(defineProps<Props>(), { message: 'hello' })\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineOptions\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于定义组件选项，如 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"name\"},{\"type\":\"text\",\"text\":\"、\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"inheritAttrs\"},{\"type\":\"text\",\"text\":\" 等\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineOptions({ name: 'MyComponent', inheritAttrs: false })\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineSlots\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于在使用 TypeScript 时为插槽定义类型\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"const slots = defineSlots<{ default: (props: { item: string }) => any }>()\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineModel\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"用于在 3.4+ 版本中简化 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"v-model\"},{\"type\":\"text\",\"text\":\" 的使用\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"const model = defineModel<string>({ default: '' })\"}]}]}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineAsyncComponent\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"虽然不是编译宏，但它是一个用于定义异步组件的运行时辅助函数\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"例如：\"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"const AsyncComp = defineAsyncComponent(() => import('./components/AsyncComponent.vue'))\"}]}]}]}]}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"这些编译宏主要用在 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"<script setup>\"},{\"type\":\"text\",\"text\":\" 中，它们提供了更简洁的语法和更好的类型推断。使用这些宏可以减少样板代码，提高代码的可读性和维护性。\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"编译宏的实现原理\"},\"content\":[{\"type\":\"text\",\"text\":\"四、编译宏的实现原理\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"编译宏的本质就是在编译阶段执行的一个转化函数。它的工作原理如下：\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"识别：编译器识别特定的宏调用（如 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineProps()\"},{\"type\":\"text\",\"text\":\"）。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"分析：分析宏调用的参数和上下文。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"转换：将宏调用转换为适当的运行时代码或组件选项。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"类型生成：（在 TypeScript 环境中）生成相应的类型声明。\"}]}]},{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"代码生成：生成最终的 JavaScript 代码，通常会移除宏调用本身。\"}]}]}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m4ml4fgx-vue3-compile-macro.png\",\"alt\":\"vue3-compile-macro.png\",\"title\":null}},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"以-defineProps-为例子实现一个编译宏功能\"},\"content\":[{\"type\":\"text\",\"text\":\"1. 以 defineProps 为例子实现一个编译宏功能\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"下面是一个 babel 插件的简单实现。它能将 Vue3 编译宏 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"defineProps\"},{\"type\":\"text\",\"text\":\" 转换成 Vue 的 props 对象。从这个例子可以更好地理解编译宏语法糖的本质。\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"const { declare } = require('@babel/helper-plugin-utils');\\nconst { types: t } = require('@babel/core');\\n\\nmodule.exports = declare(api => {\\n  api.assertVersion(7); // 确保 Babel 版本兼容性\\n\\n  return {\\n    name: \\\"babel-plugin-transform-define-props\\\",\\n    visitor: {\\n      CallExpression(path) {\\n        // 检查是否是 defineProps 函数调用\\n        if (path.node.callee.name === 'defineProps') {\\n          const arg = path.node.arguments[0];\\n          \\n          if (t.isObjectExpression(arg)) {\\n            // 处理对象语法: defineProps({ prop: String })\\n            const properties = arg.properties.map(prop => {\\n              // 将每个属性转换为 { prop: { type: PropType } } 的形式\\n              return t.objectProperty(\\n                prop.key,\\n                t.objectExpression([\\n                  t.objectProperty(t.identifier('type'), prop.value)\\n                ])\\n              );\\n            });\\n            \\n            const propsObject = t.objectExpression(properties);\\n            \\n            // 将 defineProps 调用替换为 __props__ 赋值\\n            path.replaceWith(\\n              t.variableDeclaration('const', [\\n                t.variableDeclarator(\\n                  t.identifier('__props__'),\\n                  propsObject\\n                )\\n              ])\\n            );\\n          } else if (t.isArrayExpression(arg)) {\\n            // 处理数组语法: defineProps(['prop1', 'prop2'])\\n            const properties = arg.elements.map(element => {\\n              // 将每个元素转换为 { prop: null } 的形式\\n              return t.objectProperty(element, t.identifier('null'));\\n            });\\n            \\n            const propsObject = t.objectExpression(properties);\\n            \\n            // 将 defineProps 调用替换为 __props__ 赋值\\n            path.replaceWith(\\n              t.variableDeclaration('const', [\\n                t.variableDeclarator(\\n                  t.identifier('__props__'),\\n                  propsObject\\n                )\\n              ])\\n            );\\n          }\\n        }\\n      }\\n    }\\n  };\\n});\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"转换效果\"},\"content\":[{\"type\":\"text\",\"text\":\"2. 转换效果\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"javascript\"},\"content\":[{\"type\":\"text\",\"text\":\"// 转换前：对象语法\\nconst props1 = defineProps({\\n  name: String,\\n  age: Number,\\n  isActive: Boolean\\n});\\n\\n// 转换后：对象语法转换结果\\nconst __props__ = {\\n  name: { type: String },\\n  age: { type: Number },\\n  isActive: { type: Boolean }\\n};\\n\\n// 转换前：数组语法\\nconst props2 = defineProps(['title', 'content']);\\n\\n// 转换后：数组语法转换结果\\nconst __props__ = {\\n  title: null,\\n  content: null\\n};\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在编译时识别特定的代码模式，并将其转换为等效但可能更复杂或更优化的代码。在 Vue 的实际实现中，这个过程会更加复杂，包括处理类型推断、默认值、验证等多个方面。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"总结\"},\"content\":[{\"type\":\"text\",\"text\":\"总结\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"本文介绍了 Vue3 编译宏。编译宏是 Vue3 的一个强大特性，它们提供了更简洁的语法和更好的类型推断，使得组件编写更加高效和愉快。\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"参考资料\"},\"content\":[{\"type\":\"text\",\"text\":\"参考资料\"}]},{\"type\":\"bulletList\",\"content\":[{\"type\":\"listItem\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"link\",\"attrs\":{\"href\":\"https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits\",\"target\":\"_blank\",\"rel\":\"noreferer\",\"class\":null}}],\"text\":\"Vue3 官方文档\"}]}]}]}]}","title":"Vue3 编译宏使用与原理","tags":["Vue"],"updateTime":1734084473938,"createTime":1603459142000,"draft":false,"intro":"Vue3 编译宏是一种特殊的语法糖，用于简化组件选项的声明。它们可以在 <script setup> 中使用，并且会在编译阶段被处理。编译宏可以提供类型推断、运行时消除以及开发体验优化等功能。","html":"<h1 level=\"1\" id=\"Vue3-编译宏使用与原理\"><strong>Vue3 编译宏使用与原理</strong></h1><p>Vue3 编译宏是一种特殊的语法糖，用于简化组件选项的声明。它们可以在 <code>&lt;script setup&gt;</code> 中使用，并且会在编译阶段被处理。编译宏可以提供类型推断、运行时消除以及开发体验优化等功能。</p><p></p><h2 level=\"2\" id=\"一什么是编译宏\">一、什么是编译宏</h2><p>Vue3 编译宏是在代码<strong>编译阶段处理的特殊指令或函数</strong>。Vue3 的编译宏主要是为 <code>&lt;script setup&gt;</code> 语法设计的。编译宏不需要导入就可以直接使用，且会随着 <code>&lt;script setup&gt;</code> 的处理过程一同被编译掉。</p><p></p><h2 level=\"2\" id=\"二编译宏有什么用\">二、编译宏有什么用</h2><p>编译宏提供了一种更简洁的方式来编写和维护已有的配置。在 Vue3 中，编译宏主要有以下几个作用：</p><ol><li><p><strong>类型推断和检查</strong>：宏可以提供类型安全，帮助开发者在编写代码时避免类型错误。</p></li><li><p><strong>运行时消除</strong>：在 Vue3 的 <code>&lt;script setup&gt;</code> 中，引入的宏在编译阶段处理后，最终生成的代码中可能不会包含这些宏。这意味着宏可以提供额外的功能，而不会增加运行时的开销。</p></li><li><p><strong>代码重用和维护</strong>：通过定义宏，可以在不同的组件中重用相同的逻辑。这有助于维护代码的一致性，并减少重复代码的编写。</p></li><li><p><strong>简化配置</strong>：某些宏可以用于简化 Vue 组件的配置，使得配置更加简洁明了。</p></li><li><p><strong>优化开发体验</strong>：宏可以减少样板文件，提供更简洁的语法，从而提高开发效率和体验。</p></li><li><p><strong>高级功能</strong>：一些宏可能提供高级功能，如自动注册组件、自动导入依赖等。</p></li></ol><p></p><h2 level=\"2\" id=\"三常见的编译宏\">三、常见的编译宏</h2><p>Vue 3 引入了几个编译宏（Compile-time Macros）来提高性能和开发体验。这些宏在编译时会被转换为高效的代码。下面是主要的编译宏：</p><ol><li><p><code>defineProps</code></p><ul><li><p>用于声明组件的 props</p></li><li><p>例如：<code>const props = defineProps([&apos;title&apos;, &apos;likes&apos;])</code></p></li></ul></li><li><p><code>defineEmits</code></p><ul><li><p>用于声明组件可能触发的事件</p></li><li><p>例如：<code>const emit = defineEmits([&apos;change&apos;, &apos;delete&apos;])</code></p></li></ul></li><li><p><code>defineExpose</code></p><ul><li><p>用于显式地指定哪些属性和方法可以被父组件访问</p></li><li><p>例如：<code>defineExpose({ method1, property1 })</code></p></li></ul></li><li><p><code>withDefaults</code></p><ul><li><p>用于为 <code>defineProps</code> 定义的 props 提供默认值</p></li><li><p>例如：<code>const props = withDefaults(defineProps&lt;Props&gt;(), { message: &apos;hello&apos; })</code></p></li></ul></li><li><p><code>defineOptions</code></p><ul><li><p>用于定义组件选项，如 <code>name</code>、<code>inheritAttrs</code> 等</p></li><li><p>例如：<code>defineOptions({ name: &apos;MyComponent&apos;, inheritAttrs: false })</code></p></li></ul></li><li><p><code>defineSlots</code></p><ul><li><p>用于在使用 TypeScript 时为插槽定义类型</p></li><li><p>例如：<code>const slots = defineSlots&lt;{ default: (props: { item: string }) =&gt; any }&gt;()</code></p></li></ul></li><li><p><code>defineModel</code></p><ul><li><p>用于在 3.4+ 版本中简化 <code>v-model</code> 的使用</p></li><li><p>例如：<code>const model = defineModel&lt;string&gt;({ default: &apos;&apos; })</code></p></li></ul></li><li><p><code>defineAsyncComponent</code></p><ul><li><p>虽然不是编译宏，但它是一个用于定义异步组件的运行时辅助函数</p></li><li><p>例如：<code>const AsyncComp = defineAsyncComponent(() =&gt; import(&apos;./components/AsyncComponent.vue&apos;))</code></p></li></ul></li></ol><p>这些编译宏主要用在 <code>&lt;script setup&gt;</code> 中，它们提供了更简洁的语法和更好的类型推断。使用这些宏可以减少样板代码，提高代码的可读性和维护性。</p><h2 level=\"2\" id=\"四编译宏的实现原理\">四、编译宏的实现原理</h2><p>编译宏的本质就是在编译阶段执行的一个转化函数。它的工作原理如下：</p><ul><li><p>识别：编译器识别特定的宏调用（如 <code>defineProps()</code>）。</p></li><li><p>分析：分析宏调用的参数和上下文。</p></li><li><p>转换：将宏调用转换为适当的运行时代码或组件选项。</p></li><li><p>类型生成：（在 TypeScript 环境中）生成相应的类型声明。</p></li><li><p>代码生成：生成最终的 JavaScript 代码，通常会移除宏调用本身。</p></li></ul><img src=\"/post-assets/m4ml4fgx-vue3-compile-macro.png\" alt=\"vue3-compile-macro.png\"><h3 level=\"3\" id=\"1-以-defineProps-为例子实现一个编译宏功能\">1. 以 defineProps 为例子实现一个编译宏功能</h3><p>下面是一个 babel 插件的简单实现。它能将 Vue3 编译宏 <code>defineProps</code> 转换成 Vue 的 props 对象。从这个例子可以更好地理解编译宏语法糖的本质。</p><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> { declare } = <span class=\"hljs-built_in\" class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;@babel/helper-plugin-utils&apos;</span>);\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\" class=\"hljs-attr\">types</span>: t } = <span class=\"hljs-built_in\" class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;@babel/core&apos;</span>);\n\n<span class=\"hljs-variable,language_\" class=\"hljs-variable,language_\">module</span>.<span class=\"hljs-property\" class=\"hljs-property\">exports</span> = <span class=\"hljs-title,function_\" class=\"hljs-title,function_\">declare</span>(<span class=\"hljs-function\" class=\"hljs-function\"><span class=\"hljs-params\" class=\"hljs-params\">api</span> =&gt;</span> {\n  api.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">assertVersion</span>(<span class=\"hljs-number\" class=\"hljs-number\">7</span>); <span class=\"hljs-comment\" class=\"hljs-comment\">// 确保 Babel 版本兼容性</span>\n\n  <span class=\"hljs-keyword\" class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\" class=\"hljs-attr\">name</span>: <span class=\"hljs-string\" class=\"hljs-string\">&quot;babel-plugin-transform-define-props&quot;</span>,\n    <span class=\"hljs-attr\" class=\"hljs-attr\">visitor</span>: {\n      <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">CallExpression</span>(path) {\n        <span class=\"hljs-comment\" class=\"hljs-comment\">// 检查是否是 defineProps 函数调用</span>\n        <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (path.<span class=\"hljs-property\" class=\"hljs-property\">node</span>.<span class=\"hljs-property\" class=\"hljs-property\">callee</span>.<span class=\"hljs-property\" class=\"hljs-property\">name</span> === <span class=\"hljs-string\" class=\"hljs-string\">&apos;defineProps&apos;</span>) {\n          <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> arg = path.<span class=\"hljs-property\" class=\"hljs-property\">node</span>.<span class=\"hljs-property\" class=\"hljs-property\">arguments</span>[<span class=\"hljs-number\" class=\"hljs-number\">0</span>];\n          \n          <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">isObjectExpression</span>(arg)) {\n            <span class=\"hljs-comment\" class=\"hljs-comment\">// 处理对象语法: defineProps({ prop: String })</span>\n            <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> properties = arg.<span class=\"hljs-property\" class=\"hljs-property\">properties</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">map</span>(<span class=\"hljs-function\" class=\"hljs-function\"><span class=\"hljs-params\" class=\"hljs-params\">prop</span> =&gt;</span> {\n              <span class=\"hljs-comment\" class=\"hljs-comment\">// 将每个属性转换为 { prop: { type: PropType } } 的形式</span>\n              <span class=\"hljs-keyword\" class=\"hljs-keyword\">return</span> t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">objectProperty</span>(\n                prop.<span class=\"hljs-property\" class=\"hljs-property\">key</span>,\n                t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">objectExpression</span>([\n                  t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">objectProperty</span>(t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">identifier</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;type&apos;</span>), prop.<span class=\"hljs-property\" class=\"hljs-property\">value</span>)\n                ])\n              );\n            });\n            \n            <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> propsObject = t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">objectExpression</span>(properties);\n            \n            <span class=\"hljs-comment\" class=\"hljs-comment\">// 将 defineProps 调用替换为 __props__ 赋值</span>\n            path.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">replaceWith</span>(\n              t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">variableDeclaration</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;const&apos;</span>, [\n                t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">variableDeclarator</span>(\n                  t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">identifier</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;__props__&apos;</span>),\n                  propsObject\n                )\n              ])\n            );\n          } <span class=\"hljs-keyword\" class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\" class=\"hljs-keyword\">if</span> (t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">isArrayExpression</span>(arg)) {\n            <span class=\"hljs-comment\" class=\"hljs-comment\">// 处理数组语法: defineProps([&apos;prop1&apos;, &apos;prop2&apos;])</span>\n            <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> properties = arg.<span class=\"hljs-property\" class=\"hljs-property\">elements</span>.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">map</span>(<span class=\"hljs-function\" class=\"hljs-function\"><span class=\"hljs-params\" class=\"hljs-params\">element</span> =&gt;</span> {\n              <span class=\"hljs-comment\" class=\"hljs-comment\">// 将每个元素转换为 { prop: null } 的形式</span>\n              <span class=\"hljs-keyword\" class=\"hljs-keyword\">return</span> t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">objectProperty</span>(element, t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">identifier</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;null&apos;</span>));\n            });\n            \n            <span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> propsObject = t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">objectExpression</span>(properties);\n            \n            <span class=\"hljs-comment\" class=\"hljs-comment\">// 将 defineProps 调用替换为 __props__ 赋值</span>\n            path.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">replaceWith</span>(\n              t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">variableDeclaration</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;const&apos;</span>, [\n                t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">variableDeclarator</span>(\n                  t.<span class=\"hljs-title,function_\" class=\"hljs-title,function_\">identifier</span>(<span class=\"hljs-string\" class=\"hljs-string\">&apos;__props__&apos;</span>),\n                  propsObject\n                )\n              ])\n            );\n          }\n        }\n      }\n    }\n  };\n});</code></pre></div></div><h3 level=\"3\" id=\"2-转换效果\">2. 转换效果</h3><div class=\"llt-code readonly\"><div class=\"language\">javascript</div><div class=\"wrapper\"><pre><code class=\"language-javascript\"><span class=\"hljs-comment\" class=\"hljs-comment\">// 转换前：对象语法</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> props1 = <span class=\"hljs-title,function_\" class=\"hljs-title,function_\">defineProps</span>({\n  <span class=\"hljs-attr\" class=\"hljs-attr\">name</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">String</span>,\n  <span class=\"hljs-attr\" class=\"hljs-attr\">age</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Number</span>,\n  <span class=\"hljs-attr\" class=\"hljs-attr\">isActive</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Boolean</span>\n});\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 转换后：对象语法转换结果</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> __props__ = {\n  <span class=\"hljs-attr\" class=\"hljs-attr\">name</span>: { <span class=\"hljs-attr\" class=\"hljs-attr\">type</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">String</span> },\n  <span class=\"hljs-attr\" class=\"hljs-attr\">age</span>: { <span class=\"hljs-attr\" class=\"hljs-attr\">type</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Number</span> },\n  <span class=\"hljs-attr\" class=\"hljs-attr\">isActive</span>: { <span class=\"hljs-attr\" class=\"hljs-attr\">type</span>: <span class=\"hljs-title,class_\" class=\"hljs-title,class_\">Boolean</span> }\n};\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 转换前：数组语法</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> props2 = <span class=\"hljs-title,function_\" class=\"hljs-title,function_\">defineProps</span>([<span class=\"hljs-string\" class=\"hljs-string\">&apos;title&apos;</span>, <span class=\"hljs-string\" class=\"hljs-string\">&apos;content&apos;</span>]);\n\n<span class=\"hljs-comment\" class=\"hljs-comment\">// 转换后：数组语法转换结果</span>\n<span class=\"hljs-keyword\" class=\"hljs-keyword\">const</span> __props__ = {\n  <span class=\"hljs-attr\" class=\"hljs-attr\">title</span>: <span class=\"hljs-literal\" class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\" class=\"hljs-attr\">content</span>: <span class=\"hljs-literal\" class=\"hljs-literal\">null</span>\n};</code></pre></div></div><p>在编译时识别特定的代码模式，并将其转换为等效但可能更复杂或更优化的代码。在 Vue 的实际实现中，这个过程会更加复杂，包括处理类型推断、默认值、验证等多个方面。</p><p></p><h2 level=\"2\" id=\"总结\">总结</h2><p>本文介绍了 Vue3 编译宏。编译宏是 Vue3 的一个强大特性，它们提供了更简洁的语法和更好的类型推断，使得组件编写更加高效和愉快。</p><p></p><h2 level=\"2\" id=\"参考资料\">参考资料</h2><ul><li><p><a target=\"_blank\" rel=\"noreferer\" href=\"https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits\">Vue3 官方文档</a></p></li></ul><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","cover":{"src":"/post-assets/cover/cover-vue.png"},"id":"1708-vue3-compiler-macro","path":"/posts/1708-vue3-compiler-macro.json"}