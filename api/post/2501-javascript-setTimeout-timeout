{"content":"{\"__ud_title\":\"Cursor 接入 Figma MCP\",\"__ud_tags\":[\"AI\"],\"__ud_update_time\":1743500188592,\"__ud_create_time\":1736408029472,\"__ud_draft\":false,\"type\":\"doc\",\"content\":[{\"type\":\"heading\",\"attrs\":{\"level\":1,\"id\":\"setTimeout-最小延迟机制\"},\"content\":[{\"type\":\"text\",\"marks\":[{\"type\":\"bold\"}],\"text\":\"Cursor 接入 Figma MCP\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"MCP-\"},\"content\":[{\"type\":\"text\",\"text\":\"MCP \"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"MCP (Model Control Protocol) 是 Cursor 提供的一个协议，允许外部服务为 Cursor AI 提供额外的上下文信息。通过 Figma MCP，我们可以让 Cursor 直接读取 Figma 设计稿的信息，从而实现更精准的代码还原。\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve0-1.png\",\"alt\":\"1.png\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"环境配置\"},\"content\":[{\"type\":\"text\",\"text\":\"环境配置\"}]},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"-启动-Figma-MCP-服务器\"},\"content\":[{\"type\":\"text\",\"text\":\"启动 Figma MCP 服务器\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在 Figma 控制台获取到 figma-api-key（至少需要可读权限）。复制下来生成的 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"api-key\"},{\"type\":\"text\",\"text\":\" 然后在终端执行命令。\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"shell\"},\"content\":[{\"type\":\"text\",\"text\":\"pnpx figma-developer-mcp --figma-api-key=<your-figma-api-key>\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"运行后，显示在本地 3333 端口启动 Figma MCP Server\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve7-2.jpg\",\"alt\":\"2.jpg\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"-Cursor-MCP-配置\"},\"content\":[{\"type\":\"text\",\"text\":\"Cursor MCP 配置\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在 Cursor 设置中添加 MCP 配置（Cursor Version: 0.47.8）\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve4-3.jpg\",\"alt\":\"3.jpg\",\"title\":null}},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在 \"},{\"type\":\"text\",\"marks\":[{\"type\":\"code\"}],\"text\":\"mcp.json\"},{\"type\":\"text\",\"text\":\" 中设置 Figma MCP Server 地址\"}]},{\"type\":\"codeBlock\",\"attrs\":{\"language\":\"json\"},\"content\":[{\"type\":\"text\",\"text\":\"{ \\n\\t\\\"mcpServers\\\": { \\n\\t\\t\\\"Figma\\\": { \\n\\t\\t\\t\\\"url\\\": \\\"http://localhost:3333/sse\\\" \\n\\t\\t} \\n\\t} \\n}\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"看到绿灯亮起就是说明配置成功\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve6-4.png\",\"alt\":\"4.png\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"Figma-MCP-使用\"},\"content\":[{\"type\":\"text\",\"text\":\"Figma MCP 使用\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Figma MCP 只是增强了 Cursor 的能力，使其具备了和 Figma 设计稿交互的能力。我们只需要在使用 Cursor 的过程中，将设计稿的信息附上。Cursor 就能够自动去获取目标元素的设计信息，更好地还原。\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve6-5.jpg\",\"alt\":\"5.jpg\",\"title\":null}},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"在 Prompt 中附上 Figma Section URL 并指定需要写入的文件（开启 Agent 模式）\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve6-6.jpg\",\"alt\":\"6.jpg\",\"title\":null}},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve7-7.jpg\",\"alt\":\"7.jpg\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":3,\"id\":\"还原效果\"},\"content\":[{\"type\":\"text\",\"text\":\"还原效果\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"从结果来看，还原效果比截图上传要好。\"}]},{\"type\":\"image\",\"attrs\":{\"src\":\"/post-assets/m8yazve7-8.png\",\"alt\":\"8.png\",\"title\":null}},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"-注意事项\"},\"content\":[{\"type\":\"text\",\"text\":\"注意事项\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"1. Figma 文件需要具有适当的访问权限\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"2. MCP 服务器需要保持运行状态，否则 Cursor 将无法获取设计信息\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"3. 复制的 Figma Section URL 必须是具体元素的链接，而不是整个页面的链接\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"4. 目前 MCP 主要支持基础的样式信息，复杂的交互效果可能需要手动调整\"}]},{\"type\":\"paragraph\"},{\"type\":\"heading\",\"attrs\":{\"level\":2,\"id\":\"总结\"},\"content\":[{\"type\":\"text\",\"text\":\"总结\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Figma MCP 为 Cursor AI 提供了直接获取设计稿信息的能力，相比传统的截图上传方式，它能够：\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"1. 更准确地获取颜色、尺寸、字体等样式信息\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"2. 减少手动测量和调整的工作量\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"3. 提高代码还原的效率和准确度\"}]},{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"这种工作流程特别适合前端开发团队，能够显著提升设计稿还原的效率。不过在使用过程中需要注意配置正确的权限和保持 MCP 服务器的稳定运行。\"}]},{\"type\":\"paragraph\"}]}","title":"Cursor 接入 Figma MCP","tags":["AI"],"updateTime":1743500188592,"createTime":1736408029472,"draft":false,"intro":"MCP (Model Control Protocol) 是 Cursor 提供的一个协议，允许外部服务为 Cursor AI 提供额外的上下文信息。通过 Figma MCP，我们可以让 Cursor 直接读取 Figma 设计稿的信息，从而实现更精准的代码还原。","html":"<h1 level=\"1\" id=\"Cursor-接入-Figma-MCP\"><strong>Cursor 接入 Figma MCP</strong></h1><h2 level=\"2\" id=\"MCP-\">MCP </h2><p>MCP (Model Control Protocol) 是 Cursor 提供的一个协议，允许外部服务为 Cursor AI 提供额外的上下文信息。通过 Figma MCP，我们可以让 Cursor 直接读取 Figma 设计稿的信息，从而实现更精准的代码还原。</p><img src=\"/post-assets/m8yazve0-1.png\" alt=\"1.png\"><p></p><h2 level=\"2\" id=\"环境配置\">环境配置</h2><h3 level=\"3\" id=\"启动-Figma-MCP-服务器\">启动 Figma MCP 服务器</h3><p>在 Figma 控制台获取到 figma-api-key（至少需要可读权限）。复制下来生成的&nbsp;<code>api-key</code>&nbsp;然后在终端执行命令。</p><div class=\"llt-code readonly\"><div class=\"language\">shell</div><div class=\"wrapper\"><pre><code class=\"language-shell\">pnpx figma-developer-mcp --figma-api-key=&lt;your-figma-api-key&gt;</code></pre></div></div><p>运行后，显示在本地 3333 端口启动 Figma MCP Server</p><img src=\"/post-assets/m8yazve7-2.jpg\" alt=\"2.jpg\"><p></p><h3 level=\"3\" id=\"Cursor-MCP-配置\">Cursor MCP 配置</h3><p>在 Cursor 设置中添加 MCP 配置（Cursor Version: 0.47.8）</p><img src=\"/post-assets/m8yazve4-3.jpg\" alt=\"3.jpg\"><p>在 <code>mcp.json</code> 中设置 Figma MCP Server 地址</p><div class=\"llt-code readonly\"><div class=\"language\">json</div><div class=\"wrapper\"><pre><code class=\"language-json\"><span class=\"hljs-punctuation\" class=\"hljs-punctuation\">{</span> \n\t<span class=\"hljs-attr\" class=\"hljs-attr\">&quot;mcpServers&quot;</span><span class=\"hljs-punctuation\" class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\" class=\"hljs-punctuation\">{</span> \n\t\t<span class=\"hljs-attr\" class=\"hljs-attr\">&quot;Figma&quot;</span><span class=\"hljs-punctuation\" class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\" class=\"hljs-punctuation\">{</span> \n\t\t\t<span class=\"hljs-attr\" class=\"hljs-attr\">&quot;url&quot;</span><span class=\"hljs-punctuation\" class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\" class=\"hljs-string\">&quot;http://localhost:3333/sse&quot;</span> \n\t\t<span class=\"hljs-punctuation\" class=\"hljs-punctuation\">}</span> \n\t<span class=\"hljs-punctuation\" class=\"hljs-punctuation\">}</span> \n<span class=\"hljs-punctuation\" class=\"hljs-punctuation\">}</span></code></pre></div></div><p>看到绿灯亮起就是说明配置成功</p><img src=\"/post-assets/m8yazve6-4.png\" alt=\"4.png\"><p></p><h2 level=\"2\" id=\"Figma-MCP-使用\">Figma MCP 使用</h2><p>Figma MCP 只是增强了 Cursor 的能力，使其具备了和 Figma 设计稿交互的能力。我们只需要在使用 Cursor 的过程中，将设计稿的信息附上。Cursor 就能够自动去获取目标元素的设计信息，更好地还原。</p><img src=\"/post-assets/m8yazve6-5.jpg\" alt=\"5.jpg\"><p>在 Prompt 中附上 Figma Section URL 并指定需要写入的文件（开启 Agent 模式）</p><img src=\"/post-assets/m8yazve6-6.jpg\" alt=\"6.jpg\"><img src=\"/post-assets/m8yazve7-7.jpg\" alt=\"7.jpg\"><p></p><h3 level=\"3\" id=\"还原效果\">还原效果</h3><p>从结果来看，还原效果比截图上传要好。</p><img src=\"/post-assets/m8yazve7-8.png\" alt=\"8.png\"><p></p><h2 level=\"2\" id=\"注意事项\">注意事项</h2><p>1. Figma 文件需要具有适当的访问权限</p><p>2. MCP 服务器需要保持运行状态，否则 Cursor 将无法获取设计信息</p><p>3. 复制的 Figma Section URL 必须是具体元素的链接，而不是整个页面的链接</p><p>4. 目前 MCP 主要支持基础的样式信息，复杂的交互效果可能需要手动调整</p><p></p><h2 level=\"2\" id=\"总结\">总结</h2><p>Figma MCP 为 Cursor AI 提供了直接获取设计稿信息的能力，相比传统的截图上传方式，它能够：</p><p>1. 更准确地获取颜色、尺寸、字体等样式信息</p><p>2. 减少手动测量和调整的工作量</p><p>3. 提高代码还原的效率和准确度</p><p>这种工作流程特别适合前端开发团队，能够显著提升设计稿还原的效率。不过在使用过程中需要注意配置正确的权限和保持 MCP 服务器的稳定运行。</p><p></p><script type=\"module\">const injectHtml = (root, html) => {\n  const iframe = document.createElement(\"iframe\");\n  const htmlContent = `<html><head></head><body>${html}</body></html>`;\n  iframe.style.width = \"100%\";\n  iframe.style.height = \"100%\";\n  iframe.onload = () => {\n    const doc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!doc) {\n      return;\n    }\n    doc.open();\n    doc.write(htmlContent);\n    doc.close();\n  };\n  root.replaceChildren(iframe);\n}\n  document.querySelectorAll('.playground')?.forEach(el=>{\n    const html = el.getAttribute('data-html');\n    if (html) {\n      injectHtml(el,html);\n    }\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"indicator\";\n    const showCode = document.createElement(\"div\");\n    showCode.className = \"show-code\";\n    showCode.innerText = \"code\";\n    showCode.onclick = () => {\n      el.parentElement.classList.remove(\"preview-only\");\n    };\n    const showPreview = document.createElement(\"div\");\n    showPreview.className = \"show-preview\";\n    showPreview.innerText = \"preview\";\n    showPreview.onclick = () => {\n      el.parentElement.classList.add(\"preview-only\");\n    };\n    indicator.appendChild(showCode);\n    indicator.appendChild(showPreview);\n    el.parentElement.appendChild(indicator);\n    if (window.screen.width < 768) {\n      showPreview.click();\n    }\n  });</script>","cover":{"src":"/post-assets/m8yazve0-1.png","alt":"1.png","title":null},"id":"2501-javascript-setTimeout-timeout","path":"/posts/2501-javascript-setTimeout-timeout.json"}